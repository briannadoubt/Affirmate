//
//  AuthenticationRouteCollection.swift
//  AffirmateServer
//
//  Created by Bri on 7/1/22.
//

import Fluent
import Vapor

struct AuthenticationRouteCollection: RouteCollection {
    
    func boot(routes: RoutesBuilder) throws {
        
        let auth = routes.grouped("auth")
        
        // MARK: - POST: /auth/new
        // "/new" is an open endpoint with no security validation. In the future, work in some middleware to handle denying requests based on the rate of requests, end-user's IP address, variability in account information, and other suspicious activity.
        auth.post("new") { request async throws -> HTTPStatus in
            try await request.db.transaction { database in
                try AffirmateUser.Create.validate(content: request)
                let create = try request.content.decode(AffirmateUser.Create.self)
                guard create.password == create.confirmPassword else {
                    throw Abort(.badRequest, reason: "Passwords do not match")
                }
                let passwordHash = try Bcrypt.hash(create.password)
                let user = AffirmateUser(
                    firstName: create.firstName,
                    lastName: create.lastName,
                    username: create.username,
                    email: create.email,
                    passwordHash: passwordHash
                )
                try await user.create(on: database)
                return .ok
            }
        }
        
        let passwordProtected = auth.grouped(AffirmateUser.authenticator())
        
        // MARK: - GET: /auth/login
        // "/login" requires Basic Authentication data containing the username and password
        passwordProtected.get("login") { request async throws -> AffirmateUser.LoginResponse in
            try await request.db.transaction { database in
                let currentUser = try request.auth.require(AffirmateUser.self)
                let sessionToken = try currentUser.generateToken()
                try await sessionToken.save(on: database)
                let loginResponse = AffirmateUser.LoginResponse(
                    sessionToken: sessionToken,
                    user: try await AffirmateUser.getCurrentUserResponse(currentUser, database: database)
                )
                return loginResponse
            }
        }
        
        // MARK: - POST: /auth/validate
        // "/validate" checks if there is a valid token on the JWT session.
        // If this check fails the client is expected to re-authenticate with another call to "/login"
        auth.post("validate") { request -> HTTPStatus in
            try request.auth.require(SessionToken.self)
            return .ok
        }
        
        let tokenProtected = auth.grouped(SessionToken.authenticator(), SessionToken.guardMiddleware())
        
        // MARK: - POST: /auth/logout
        tokenProtected.post("logout") { request -> HTTPStatus in
            let token = try request.auth.require(SessionToken.self)
            try await token.delete(on: request.db)
            return .ok
        }
        
        // MARK: - GET: /auth/apple
        // "/apple" verifies the attached JWT Bearer token generated by Apple and sent by the client with Apple's servers for authentication verification.
        // NOTE: This route requires no prior authentication since it is used for sign up.
        //        auth.get("apple") { request async throws -> Token.Response in
        //            let appleIdentityToken = try await request.jwt.apple.verify()
        //            let payload = Token(user: <#T##AffirmateUser#>)
        //        }
    }
}

extension AffirmateUser {
    
    static func getCurrentUserResponse(_ currentUser: AffirmateUser, database: Database) async throws -> AffirmateUser.GetResponse {
        let chatInvitations = try await currentUser.$chatInvitations
            .query(on: database)
            .with(\.$openInvitations) {
                $0
                    .with(\.$invitedBy) {
                        $0.with(\.$publicKey)
                        $0.with(\.$user)
                    }
                    .with(\.$user)
                    .with(\.$chat) {
                        $0.with(\.$participants) {
                            $0.with(\.$user)
                        }
                    }
            }
            .all()
            .flatMap { chat in
                chat.openInvitations
            }
            .filter {
                try $0.user.requireID() == currentUser.requireID()
            }
        let getResponse = try AffirmateUser.GetResponse(
            id: currentUser.requireID(),
            firstName: currentUser.firstName,
            lastName: currentUser.lastName,
            username: currentUser.username,
            email: currentUser.email,
            chatInvitations: chatInvitations.map {
                return try ChatInvitation.GetResponse(
                    id: $0.requireID(),
                    role: $0.role,
                    userId: $0.user.requireID(),
                    invitedBy: $0.invitedBy.requireID(),
                    invitedByUsername: $0.invitedBy.user.username,
                    chatId: $0.chat.requireID(),
                    chatName: $0.chat.name,
                    chatParticipantUsernames: $0.chat.participants.map { $0.user.username },
                    chatSalt: $0.chat.salt
                )
            }
        )
        return getResponse
    }
}
